@startuml
participant MessageList
participant homeUtils
participant Redux
participant allPaginatedReducer
participant handleLoadNextPageMessages
rnote over handleLoadNextPageMessages
 saga
endrnote

activate MessageList
rnote over MessageList
User scrolls to
the bottom of
the message list
endrnote
MessageList -> MessageList : FlatList invokes\nonEndReachedCallback
activate MessageList

MessageList -> homeUtils : calls\ngetLoadNextPageMessagesActionIfAllowed
activate homeUtils
rnote over homeUtils
undefined is returned if
- system is busy archiving or
  restoring messages
- system is loading the inbox
  or archive message list
- there is no 'next' id for
  current message page
- a previous request for next
  page messages has failed
  within two seconds
endrnote
homeUtils -> MessageList : returns\n| undefined\n| loadNextPageMessages.request
deactivate homeUtils

MessageList -> Redux : dispatches\nloadNextPageMessages.request
deactivate MessageList
deactivate MessageList

Redux -> allPaginatedReducer ++ : passes\nloadNextPageMessages.request
allPaginatedReducer -> Redux --: returns\nnew AllPaginated state

Redux -> handleLoadNextPageMessages ++ : forwards\nloadNextPageMessages.request

handleLoadNextPageMessages  -> BE : API call to\nmessages?maximum_id=
rnote over BE
async
endrnote
BE ->handleLoadNextPageMessages : replies with\nPaginatedPublicMessagesCollection

handleLoadNextPageMessages -> handleLoadNextPageMessages : maps\nPaginatedPublicMessagesCollection\ninto UIMessage[]

handleLoadNextPageMessages -> Redux -- : dispatches\nloadNextPageMessages.success

Redux -> allPaginatedReducer ++ : passes\nloadNextPageMessages.success
allPaginatedReducer -> Redux -- : returns\nnew AllPaginated state

MessageList -> Redux: invokes\nMessageListForCategorySelector
activate MessageList
Redux -> MessageList : returns\nUIMessages[]
deactivate MessageList
rnote over MessageList
UI renders
updated
message list
endrnote

@enduml
