@startuml

collections messages
participant ExtractMessage as em
collections "message-content" as mc
participant "ai-common" as ai

em -> messages : Read an item
activate em

em -> em : Decode input

break Invalid input
  em -> ai : Track the error event
  em -> messages : End
end

note left of em
  At this point the function know:
- messageId
- senderServiceId
- senderUserId
- isPending
- timestamp (from _ts cosmos metadata)
- featureLevelType
end note

em -> mc : Ask for message content
activate mc

alt Error from storage
  mc -[#red]> em : Erorr
  em -[#red]> messages : Throw an error to trigger retry
else if Document not found
  mc -[#red]> em : Empty response
  em -> ai : Track the error event
  em -> messages : End
else Document does not match the message content shape
  mc -[#red]> em : Decode error
  em -> ai : Track the error event
  em -> messages : End
end

mc -[#green]> em : Message content
deactivate mc

note left of em
  At this point the function knows:
- subject
- hasRemoteContent optional
- hasAttachments optional
- hasPrecondition optional
- requireSecureChannels
end note

em -> em : Compute the category

note right of em
The category is calculated based on
the content of the message.
end note

em -> em : Create the avro

@enduml
