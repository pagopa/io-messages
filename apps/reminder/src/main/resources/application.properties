#cors
spring_cors_origin=*
server.port=9090
#jpa:
#spring.jpa.show-sql=true
#spring.jpa.properties.hibernate.format_sql=true
logging.level.org.springframework.data.mongodb.core.MongoTemplate=ERROR

#print the statement parameters
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=ERROR

spring.devtools.add-properties= true
spring.servlet.multipart.max-file-size=200MB
spring.servlet.multipart.max-request-size=200MB

#parametri scheduler
reminder.day=${REMINDER_DAY}
payment.day=${PAYMENT_DAY}
test.active=${TEST_ACTIVE}
#parametri query mongo
max.read.message.notify=${MAX_READ_MESSAGE}
max.paid.message.notify=${MAX_PAID_MESSAGE}
start.day=${START_DAY}
#Mongo
spring.data.mongodb.database=${MONGO_DATABASE}
spring.data.mongodb.uri=${MONGO_DATABASE_URI}

#INTEGRATION
notification.senderMetadata.serviceName=${SENDER_SERVICE_NAME}
notification.senderMetadata.organizationName=${SENDER_ORGANIZATION_NAME}
notification.senderMetadata.departmentName=${SENDER_DEPARTMENT_NAME}
notification.notifyEndpoint=${IO_NOTIFY_ENDPOINT}
paymentupdater.url = ${PAYMENTUPDATER_ENDPOINT}

#parametri scheduler
scheduler.reminderstonotify.cron-expression = ${QUARTZ_SCHEDULER_TIMER_NOTIFY}
scheduler.reminderstodelete.cron-expression = ${QUARTZ_SCHEDULER_TIMER_DELETE}
scheduler.reminderstonotify.active = ${SCHEDULER_REMINDER_NOTIFY_ACTIVE}
scheduler.reminderstodelete.active = ${SCHEDULER_REMINDER_DELETE_ACTIVE}

#CHECKPOINT CHUNK SIZE
checkpoint.size = 10


logging.level.com.azure = ERROR
logging.level.org.mongodb.driver = ERROR
logging.level.org.apache.avro.Schema = ERROR
logging.level.it.ioapp.com.reminder.scheduler = ERROR
health.value=Reminder Dev


#kafka
bootstrap.servers=bootstrap.servers
security.protocol=security.protocol
sasl.mechanism=sasl.mechanism
sasl.jaas.conf=sasl.jaas.config


#parametri per numero tentativi
interval.function=${RESTCALL_INTERVAL_FUNCTION}
attempts.max=${RESTCALL_MAX_ATTEMPTS}

spring.jackson.serialization.WRITE_DATES_AS_TIMESTAMPS = false


security.protocol.reminder=${SECURITY_PROTOCOL_REMINDER}
sasl.mechanism.reminder=${SASL_MECHANISM_REMINDER}

#TOPICS
kafka.message = ${KAFKA_MESSAGE}
kafka.status = ${KAFKA_STATUS}
kafka.payment = ${KAFKA_PAYMENT}
kafka.send = ${KAFKA_SEND}
#QUEUE
kafka.topic.message = ${KAFKA_URL_MESSAGE}
bootstrap.servers.message=${BOOTSTRAP_SERVER_MESSAGE}
kafka.topic.messagestatus = ${KAFKA_URL_MESSAGESTATUS}
bootstrap.servers.messagestatus=${BOOTSTRAP_SERVER_MESSAGESTATUS}
kafka.topic.messagesend = ${KAFKA_URL_MESSAGESEND}
bootstrap.servers.messagesend = ${BOOTSTRAP_SERVER_MESSAGESEND}
bootstrap.servers.shared=${BOOTSTRAP_SERVER_SHARED}
security.protocol.shared=${SECURITY_PROTOCOL_SHARED}
sasl.mechanism.shared=${SASL_MECHANISM_SHARED}
sasl.jaas.conf.shared=${KAFKA_URL_SHARED}


payment.request = ${PROXY_ENDPOINT}
enable_rest_key = ${ENABLE_REST_KEY}
proxy_endpoint_subscription_key = ${PROXY_ENDPOINT_SUBSCRIPTION_KEY}

notification.request = ${IO_NOTIFY_ENDPOINT}
notification_endpoint_subscription_key = ${IO_NOTIFY_ENDPOINT_SUBSCRIPTION_KEY}

message.auto.start=${IS_ACTIVE_MESSAGE_CONSUMER}
messagestatus.auto.start=${IS_ACTIVE_MESSAGESTATUS_CONSUMER}
payment.auto.start=${IS_ACTIVE_PAYMENT_CONSUMER}
messagesend.auto.start=${IS_ACTIVE_MESSAGESEND_CONSUMER}

error_statuscode.values=${PROXY_ERROR_STATUSCODE}

find.reminder.generic.max_page_size=${REMINDER_GENERIC_MAX_PAGE_SIZE}
find.reminder.payment.max_page_size=${REMINDER_PAYMENT_MAX_PAGE_SIZE}

#============================================================================
# Configure Quartz
#============================================================================
spring.quartz.autostartup=${ENABLE_QUARTZ}
spring.quartz.job-store-type=jdbc
spring.quartz.jdbc.initialize-schema=never
#============================================================================
# Configure Main Scheduler Properties
#============================================================================

spring.quartz.properties.org.quartz.scheduler.instanceName = MyClusteredScheduler
spring.quartz.properties.org.quartz.scheduler.instanceId = AUTO

#============================================================================
# Configure ThreadPool
#============================================================================

spring.quartz.properties.org.quartz.threadPool.class = org.quartz.simpl.SimpleThreadPool
spring.quartz.properties.org.quartz.threadPool.threadCount = 16
spring.quartz.properties.org.quartz.threadPool.threadPriority = 5

#============================================================================
# Configure JobStore
#============================================================================

spring.quartz.properties.org.quartz.jobStore.misfireThreshold = 10000

spring.quartz.properties.org.quartz.jobStore.class = org.quartz.impl.jdbcjobstore.JobStoreTX
spring.quartz.properties.org.quartz.jobStore.driverDelegateClass = org.quartz.impl.jdbcjobstore.StdJDBCDelegate
spring.quartz.properties.org.quartz.jobStore.useProperties = false
spring.quartz.properties.org.quartz.jobStore.dataSource = quartzDS
spring.quartz.properties.org.quartz.jobStore.tablePrefix = QRTZ_

spring.quartz.properties.org.quartz.jobStore.isClustered = true
spring.quartz.properties.org.quartz.jobStore.clusterCheckinInterval = 30000

#============================================================================
# Configure Datasources
#============================================================================
spring.quartz.properties.org.quartz.dataSource.quartzDS.driver = com.mysql.cj.jdbc.Driver
spring.quartz.properties.org.quartz.dataSource.quartzDS.provider = hikaricp
spring.quartz.properties.org.quartz.dataSource.quartzDS.URL = ${MYSQL_URL}
spring.quartz.properties.org.quartz.dataSource.quartzDS.user = ${MYSQL_USER}
spring.quartz.properties.org.quartz.dataSource.quartzDS.password = ${MYSQL_PASSWORD}

#============================================================================
# Configure Connection Pool
#============================================================================
spring.quartz.properties.org.quartz.dataSource.quartzDS.maximumPoolSize = ${QUARTZ_MAXIMUM_POOL_SIZE}
spring.quartz.properties.org.quartz.dataSource.quartzDS.connectionTestQuery = SELECT 1
spring.quartz.properties.org.quartz.dataSource.quartzDS.validationTimeout = 30000
spring.quartz.properties.org.quartz.dataSource.quartzDS.minimumIdle = ${QUARTZ_MINIMUM_IDLE_CONNECTIONS}
spring.quartz.properties.org.quartz.dataSource.quartzDS.idleTimeout = ${QUARTZ_IDLE_CONNECTIONS_TIMEOUT}

#============================================================================
# Configure Flyway
#============================================================================
spring.flyway.enabled=true

#============================================================================
# Configure Logging
#============================================================================
logging.level.root=${MAIN_LOGGING_LEVEL}
